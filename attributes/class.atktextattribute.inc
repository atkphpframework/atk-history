<?php
  /**
   * The atkTextAttribute class represents an attribute of a node
   * that is a big text field.
   *
   * @author Ivo Jansch (ivo@achievo.org)
   * @version $Revision$
   *   
   * $Id$
   *   
   */
  class atkTextAttribute extends atkAttribute
  {
    // number of rows of the edit box
    var $m_rows = 10;
    var $m_cols;

    /**
     * Constructor
     * @param $name Name of the attribute
     * @param $size can be an array with cols and rows key for size or just the rows size
     * @param $flags Flags for this attribute
     */
    function atkTextAttribute($name,$size=0,$flags=0)
    { 
      
      // compatiblity with old versions
      if (func_num_args()==3)
      {
         if(is_array($size))
         {
           if($size['rows']!='') $this->m_rows = $size['rows'];
           if($size['cols']!='') $this->m_cols = $size['cols'];
         }
         else $this->m_rows=$size;
      }
      else                   
      {
        $flags = $size;
      }
      $this->atkAttribute($name,$flags); // base class constructor
    }

    /**
     * Returns a piece of html code that can be used in a form to edit this
     * attribute's value.
     * @param $record Array with fields
     * @param $size Array with field rows and cols for additional size of the text box
     * @return piece of html code with a textarea
     */
    function edit($record="", $fieldprefix="")
    {      
      if ($this->m_cols != 0) 
      {
        $cols = $this->m_cols;
      }
      else 
      {                
        $cols = $this->maxInputSize();        
      }
      $rows = $this->m_rows;
      $id = $fieldprefix.$this->fieldName();
      $this->registerKeyListener($id, KB_CTRLCURSOR);  
      if ($rows =="" || $rows == 0) $rows = 10;
	    // watch out, $maxsize isn't supported for a textarea.
      $result= '<textarea id="'.$id.'" name="'.$id.'" rows="'.$rows.'" cols="'.$cols.'" wrap="virtual"'.               
               '>'.htmlspecialchars($record[$this->fieldName()]).'</textarea>';
      return $result;
    }

 /**
     * Add's fields to query
     * @param $query The SQL query
     * @param $tablename Tablename
     * @param $fieldaliasprefix Field alias prefix
     * @param $level ?
     * @param $mode Indicates what kind of query is being processing:
     *              This can be any action performed on a node (edit, add, etc)
     *              Mind you that "add" and "update" are the actions that store
     *              something in the database, whereas the rest are probably
     *              select queries.
     * @return New SQL Query
     */
    function addToQuery(&$query, $tablename="", $fieldaliasprefix="", $rec="", $level, $mode)
    {
      if ($mode == "add" || $mode == "update")
      {
        $query->addField($this->fieldName(),$this->value2db($rec),"","",!$this->hasFlag(AF_NO_QUOTES), $mode, $this->dbFieldType());         
      }
      else
      {
        $query->addField($this->fieldName(),"",$tablename,$fieldaliasprefix,!$this->hasFlag(AF_NO_QUOTES), $mode, $this->dbFieldType());
      }
    }
    
 /**
     * Add's slashes to the string for the database
     * @param $rec Array with values
     * @return String with slashes
     */
    function value2db($rec)
    {
      if (atkconfig('database') != 'oci9')
        return escapeSQL($rec[$this->fieldName()]);
      else 
        return addslashes($rec[$this->fieldName()]); //CLOB in oci9 don't need quotes to be escapedt
    }
    
        /**
     * Removes slashes from the string
     * @param $rec Array with values
     * @return String without slashes
     */
    function db2value($rec)
    {
      if (atkconfig('database') != 'oci9')
        return stripslashes($rec[$this->fieldName()]);
      else
        return $rec[$this->fieldName()];
    }

    function dbFieldType()
    {
      if ($this->m_dbfieldtype=="")
      {
        return "text";
      }
      return $this->m_dbfieldtype;
    }
    
    function fetchMeta($metadata)
    {
      $this->m_dbfieldtype = $metadata[$this->fieldName()]["type"];
    }
  }
?>
