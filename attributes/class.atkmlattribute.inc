<?php
  /**
   * The atkMlAttribute class represents an multilanguage attribute of an atkNode.
   *
   * @author Peter Verhage (peter@ibuildings.nl)
   * @version $Revision$
   *
   * $Id$
   *
   */
  class atkMlAttribute extends atkAttribute
  {
    /**
     * Constructor
     * @param $name name of the attribute
     * @param $flags flags for the attribute
     */
    function atkMlAttribute($name, $flags = 0, $size = 0)
    {
      global $config_atkroot;
      /* base class constructor */
      $this->atkAttribute($name, ($flags|AF_MULTILANGUAGE|(AF_PRIMARY^AF_OBLIGATORY))^(AF_PRIMARY^AF_OBLIGATORY), $size);
    }

    /**
     * Returns a piece of html code that can be used in a form to edit this
     * attribute's value (one box which can be used for all the languages).
     * @param $record array with values
     * @return piece of html code
     */
    function edit($record="")
    {
      global $config_language;
      
      /* register javascript */
      $page = &atkPage::getInstance();
      $page->register_script(atkconfig("atkroot")."atk/javascript/class.atkmultilanguage.js.php");
      $page->register_submitscript('submitSave(form);');

      /* hidden values */
      for ($i = 1; $i < sizeof($config_language); $i++)
      {
        $result .= '<input type="hidden" name="'.$this->formName().'['.$config_language[$i].']"'.
                   ' value="'.htmlspecialchars($record[$this->fieldName()][$config_language[$i]]).'" >';
      }

      /* default language */
      $result .= text('language_'.$config_language[0]).':<br>'.
                 '<input type="text" name="'.$this->formName().'['.$config_language[0].']"'.
                 ' value="'.htmlspecialchars($record[$this->fieldName()][$config_language[0]]).'"'.
                 ($this->m_size > 0 ? ' size="'.$this->m_size.'"' : '').
                 ($this->m_maxsize > 0 ? ' maxlength="'.$this->m_maxsize.'"' : '').'><br><br>';

      
      /* first language of other languages */
      $result .= text((count($config_language)==2 ? $config_language[1] : "multilanguage_choice").'').':<br>'.
                 '<input type="text" name="'.$this->formName().'['.(count($config_language)==2 ? $config_language[1] : "multilanguage").']"'.
                 ' value="'.htmlspecialchars($record[$this->fieldName()][$config_language[1]]).'"'.
                 ($this->m_size > 0 ? ' size="'.$this->m_size.'"' : '').
                 ($this->m_maxsize > 0 ? ' maxlength="'.$this->m_maxsize.'"' : '').'><br><br>';

      return $result;
    }

    /**
     * Returns a piece of html code that can be used to search the attribute.
     * We will use the default language for this!
     * @param $record array with values
     * @return piece of htmlcode
     */
    function search($record="")
    {
      global $config_language;
      
      $result= '<input type="text" name="atksearch['.$this->formName().'_'.$config_language[0].']"'.
               ' value="'.$record[$this->fieldName().'_'.$config_language[0]].'"'.
               ($this->m_searchsize > 0 ? ' size="'.$this->m_searchsize.'"' : '').
               ($this->m_maxsize > 0 ? ' maxlength="'.$this->m_maxsize.'"' : '').'>';

      return $result;
    }

    /**
     * Check if the attribute is empty
     * @return true if it's empty
     */
    function isEmpty($postvars)
    {
      global $config_language;

      for ($i=0,$_i=count($config_language);$i<$_i;$i++)
      {
        if (strlen($postvars[$this->fieldName()][$config_language[$i]]) == 0) return 1;
      }

      return 0;
    }

    /**
     * Returns a displayable string for this value.
     * We always display the first language only.
     * @param $record array with values
     * @return string ready for displaying
     */
    function display($record)
    {
      global $config_language;
      return nl2br(htmlspecialchars($record[$this->fieldName()][$config_language[0]]));
    }

    /**
     * Returns a piece of html code that can be used in a form to display
     * hidden values for this attribute.
     * @param $record Array with values
     * @return Piece of htmlcode
     */
    function hide($record="")
    {
      global $config_language;    
    
      /* hidden values */
      for ($i = 0; $i < sizeof($config_language); $i++)
      {
        $result .= '<input type="hidden" name="'.$this->formName().'['.$config_language[$i].']"'.
                   ' value="'.htmlspecialchars($record[$this->fieldName()][$config_language[$i]]).'">';
      }
    
      return $result;             
    }

    /**
     * Removes slashes from the strings
     * @param $rec array with values
     * @return array with string without slashes
     */
    function db2value($rec)
    {
      global $config_language;

      for ($i=0,$_i=count($config_language);$i<$_i;$i++)
      {      
        $result[$config_language[$i]] = stripslashes($rec[$this->fieldName().'_'.$config_language[$i]]);
      }
      return $result;
    }

    /**
     * Fetch values
     * @param $rec array with values
     * @return array with values
     */
    function fetchValue($rec)
    {
      global $config_language;

      for ($i=0,$_i=count($config_language);$i<$_i;$i++)
      {
        $result[$config_language[$i]] = stripslashes($rec[$this->fieldName()][$config_language[$i]]);
      }
      return $result;
    }

    /**
     * Add's fields to query
     * @param $query the SQL query
     * @param $tablename tablename
     * @param $fieldaliasprefix field alias prefix
     * @param $level ?
     * @param $mode select/add/edit mode
     * @return new SQL query
     */
    function addToQuery(&$query, $tablename="", $fieldaliasprefix="", $rec, $level, $mode)
    {
      global $config_language;

      if ($mode == "add" || $mode == "update")
      {
        for ($i=0,$_i=count($config_language);$i<$_i;$i++)
        {
          $query->addField($this->fieldName().'_'.$config_language[$i],escapeSQL($rec[$this->fieldName()][$config_language[$i]]),"","",!$this->hasFlag(AF_NO_QUOTES));
        }
      }
      else
      {
        for ($i=0,$_i=count($config_language);$i<$_i;$i++)
        {
          $query->addField($this->fieldName().'_'.$config_language[$i],"",$tablename,$fieldaliasprefix,!$this->hasFlag(AF_NO_QUOTES));
        }
      }      
    }

    /**
     * Fetch the metadata about this attrib from the table metadata
     */    
    function fetchMeta($metadata)    
    {
      global $config_language;
      $attribname = $this->fieldName().'_'.$config_language[0];
      $this->m_size = min($metadata[$attribname]['len'], $this->maxInputSize());
      $this->m_searchsize = min($metadata[$attribname]['len'], 20);
      $this->m_maxsize = $metadata[$attribname]['len'];                           
    }
  }
  
?>
